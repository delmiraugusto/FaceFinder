[
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Resource",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {}
    },
    {
        "label": "Resource",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {}
    },
    {
        "label": "Resource",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {}
    },
    {
        "label": "Resource",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {}
    },
    {
        "label": "Resource",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "AttemptService",
        "importPath": "src.service.attempt_service",
        "description": "src.service.attempt_service",
        "isExtraImport": true,
        "detail": "src.service.attempt_service",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "src.models.Base",
        "description": "src.models.Base",
        "isExtraImport": true,
        "detail": "src.models.Base",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "src.models.Base",
        "description": "src.models.Base",
        "isExtraImport": true,
        "detail": "src.models.Base",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "src.models.Base",
        "description": "src.models.Base",
        "isExtraImport": true,
        "detail": "src.models.Base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.models.Base",
        "description": "src.models.Base",
        "isExtraImport": true,
        "detail": "src.models.Base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.models.Base",
        "description": "src.models.Base",
        "isExtraImport": true,
        "detail": "src.models.Base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.models.Base",
        "description": "src.models.Base",
        "isExtraImport": true,
        "detail": "src.models.Base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.models.Base",
        "description": "src.models.Base",
        "isExtraImport": true,
        "detail": "src.models.Base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.models.Base",
        "description": "src.models.Base",
        "isExtraImport": true,
        "detail": "src.models.Base",
        "documentation": {}
    },
    {
        "label": "require_api_key",
        "importPath": "src.config.auth",
        "description": "src.config.auth",
        "isExtraImport": true,
        "detail": "src.config.auth",
        "documentation": {}
    },
    {
        "label": "require_api_key",
        "importPath": "src.config.auth",
        "description": "src.config.auth",
        "isExtraImport": true,
        "detail": "src.config.auth",
        "documentation": {}
    },
    {
        "label": "require_api_key",
        "importPath": "src.config.auth",
        "description": "src.config.auth",
        "isExtraImport": true,
        "detail": "src.config.auth",
        "documentation": {}
    },
    {
        "label": "Attempt",
        "importPath": "src.models.Attempt",
        "description": "src.models.Attempt",
        "isExtraImport": true,
        "detail": "src.models.Attempt",
        "documentation": {}
    },
    {
        "label": "Attempt",
        "importPath": "src.models.Attempt",
        "description": "src.models.Attempt",
        "isExtraImport": true,
        "detail": "src.models.Attempt",
        "documentation": {}
    },
    {
        "label": "Attempt",
        "importPath": "src.models.Attempt",
        "description": "src.models.Attempt",
        "isExtraImport": true,
        "detail": "src.models.Attempt",
        "documentation": {}
    },
    {
        "label": "HospedeService",
        "importPath": "src.service.hospede_service",
        "description": "src.service.hospede_service",
        "isExtraImport": true,
        "detail": "src.service.hospede_service",
        "documentation": {}
    },
    {
        "label": "HospedeService",
        "importPath": "src.service.hospede_service",
        "description": "src.service.hospede_service",
        "isExtraImport": true,
        "detail": "src.service.hospede_service",
        "documentation": {}
    },
    {
        "label": "ReservaService",
        "importPath": "src.service.reserva_service",
        "description": "src.service.reserva_service",
        "isExtraImport": true,
        "detail": "src.service.reserva_service",
        "documentation": {}
    },
    {
        "label": "verify_faces",
        "importPath": "src.service.verificacao_service",
        "description": "src.service.verificacao_service",
        "isExtraImport": true,
        "detail": "src.service.verificacao_service",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "hospede_attempt",
        "importPath": "src.models.Hospede_Attempt",
        "description": "src.models.Hospede_Attempt",
        "isExtraImport": true,
        "detail": "src.models.Hospede_Attempt",
        "documentation": {}
    },
    {
        "label": "hospede_attempt",
        "importPath": "src.models.Hospede_Attempt",
        "description": "src.models.Hospede_Attempt",
        "isExtraImport": true,
        "detail": "src.models.Hospede_Attempt",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "hospede_reserva",
        "importPath": "src.models.Hospede_Reserva",
        "description": "src.models.Hospede_Reserva",
        "isExtraImport": true,
        "detail": "src.models.Hospede_Reserva",
        "documentation": {}
    },
    {
        "label": "hospede_reserva",
        "importPath": "src.models.Hospede_Reserva",
        "description": "src.models.Hospede_Reserva",
        "isExtraImport": true,
        "detail": "src.models.Hospede_Reserva",
        "documentation": {}
    },
    {
        "label": "datetime,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime.",
        "description": "datetime.",
        "detail": "datetime.",
        "documentation": {}
    },
    {
        "label": "Hospede",
        "importPath": "src.models.Hospede",
        "description": "src.models.Hospede",
        "isExtraImport": true,
        "detail": "src.models.Hospede",
        "documentation": {}
    },
    {
        "label": "Hospede",
        "importPath": "src.models.Hospede",
        "description": "src.models.Hospede",
        "isExtraImport": true,
        "detail": "src.models.Hospede",
        "documentation": {}
    },
    {
        "label": "Hospede",
        "importPath": "src.models.Hospede",
        "description": "src.models.Hospede",
        "isExtraImport": true,
        "detail": "src.models.Hospede",
        "documentation": {}
    },
    {
        "label": "Hospede",
        "importPath": "src.models.Hospede",
        "description": "src.models.Hospede",
        "isExtraImport": true,
        "detail": "src.models.Hospede",
        "documentation": {}
    },
    {
        "label": "Reserva",
        "importPath": "src.models.Reserva",
        "description": "src.models.Reserva",
        "isExtraImport": true,
        "detail": "src.models.Reserva",
        "documentation": {}
    },
    {
        "label": "Reserva",
        "importPath": "src.models.Reserva",
        "description": "src.models.Reserva",
        "isExtraImport": true,
        "detail": "src.models.Reserva",
        "documentation": {}
    },
    {
        "label": "Hello",
        "importPath": "src.controllers.HelloWorld",
        "description": "src.controllers.HelloWorld",
        "isExtraImport": true,
        "detail": "src.controllers.HelloWorld",
        "documentation": {}
    },
    {
        "label": "VerificacaoController",
        "importPath": "src.controllers.Verificacao",
        "description": "src.controllers.Verificacao",
        "isExtraImport": true,
        "detail": "src.controllers.Verificacao",
        "documentation": {}
    },
    {
        "label": "ReservaHospedeResource",
        "importPath": "src.controllers.ReservaController",
        "description": "src.controllers.ReservaController",
        "isExtraImport": true,
        "detail": "src.controllers.ReservaController",
        "documentation": {}
    },
    {
        "label": "ReservaListResource",
        "importPath": "src.controllers.ReservaController",
        "description": "src.controllers.ReservaController",
        "isExtraImport": true,
        "detail": "src.controllers.ReservaController",
        "documentation": {}
    },
    {
        "label": "ReservaResource",
        "importPath": "src.controllers.ReservaController",
        "description": "src.controllers.ReservaController",
        "isExtraImport": true,
        "detail": "src.controllers.ReservaController",
        "documentation": {}
    },
    {
        "label": "ReservaStatusResource",
        "importPath": "src.controllers.ReservaController",
        "description": "src.controllers.ReservaController",
        "isExtraImport": true,
        "detail": "src.controllers.ReservaController",
        "documentation": {}
    },
    {
        "label": "HospedeListResource",
        "importPath": "src.controllers.HospedeController",
        "description": "src.controllers.HospedeController",
        "isExtraImport": true,
        "detail": "src.controllers.HospedeController",
        "documentation": {}
    },
    {
        "label": "HospedeResource",
        "importPath": "src.controllers.HospedeController",
        "description": "src.controllers.HospedeController",
        "isExtraImport": true,
        "detail": "src.controllers.HospedeController",
        "documentation": {}
    },
    {
        "label": "HospedeStatusResource",
        "importPath": "src.controllers.HospedeController",
        "description": "src.controllers.HospedeController",
        "isExtraImport": true,
        "detail": "src.controllers.HospedeController",
        "documentation": {}
    },
    {
        "label": "AttemptListResource",
        "importPath": "src.controllers.AttemptController",
        "description": "src.controllers.AttemptController",
        "isExtraImport": true,
        "detail": "src.controllers.AttemptController",
        "documentation": {}
    },
    {
        "label": "AttemptResource",
        "importPath": "src.controllers.AttemptController",
        "description": "src.controllers.AttemptController",
        "isExtraImport": true,
        "detail": "src.controllers.AttemptController",
        "documentation": {}
    },
    {
        "label": "AttemptStatusResource",
        "importPath": "src.controllers.AttemptController",
        "description": "src.controllers.AttemptController",
        "isExtraImport": true,
        "detail": "src.controllers.AttemptController",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "AttemptRepository",
        "importPath": "src.repository.attempt_repository",
        "description": "src.repository.attempt_repository",
        "isExtraImport": true,
        "detail": "src.repository.attempt_repository",
        "documentation": {}
    },
    {
        "label": "HospedeRepository",
        "importPath": "src.repository.hospede_repository",
        "description": "src.repository.hospede_repository",
        "isExtraImport": true,
        "detail": "src.repository.hospede_repository",
        "documentation": {}
    },
    {
        "label": "ReservaRepository",
        "importPath": "src.repository.reserva_repository",
        "description": "src.repository.reserva_repository",
        "isExtraImport": true,
        "detail": "src.repository.reserva_repository",
        "documentation": {}
    },
    {
        "label": "DeepFace",
        "importPath": "deepface",
        "description": "deepface",
        "isExtraImport": true,
        "detail": "deepface",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "pytesseract",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytesseract",
        "description": "pytesseract",
        "detail": "pytesseract",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "genai",
        "importPath": "google",
        "description": "google",
        "isExtraImport": true,
        "detail": "google",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "src",
        "description": "src",
        "isExtraImport": true,
        "detail": "src",
        "documentation": {}
    },
    {
        "label": "require_api_key",
        "kind": 2,
        "importPath": "src.config.auth",
        "description": "src.config.auth",
        "peekOfCode": "def require_api_key(expected_key):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            key = request.headers.get(\"api-key\")\n            if key != expected_key:\n                return {\"error\": \"Nao Autorizado\"}, 401\n            return func(*args, **kwargs)\n        return wrapper\n    return decorator",
        "detail": "src.config.auth",
        "documentation": {}
    },
    {
        "label": "AttemptBaseResource",
        "kind": 6,
        "importPath": "src.controllers.AttemptController",
        "description": "src.controllers.AttemptController",
        "peekOfCode": "class AttemptBaseResource(Resource):\n    method_decorators = [require_api_key(ATTEMPT_API_KEY)]\nclass AttemptResource(AttemptBaseResource):\n    def post(self, hospede_id):\n        attempt_service = AttemptService(db.session)\n        try:\n            data = request.get_json()\n            attempt = attempt_service.criar_attempt(data, hospede_id)\n            return {\n                \"codigo_uuid\": attempt.codigo_uuid,",
        "detail": "src.controllers.AttemptController",
        "documentation": {}
    },
    {
        "label": "AttemptResource",
        "kind": 6,
        "importPath": "src.controllers.AttemptController",
        "description": "src.controllers.AttemptController",
        "peekOfCode": "class AttemptResource(AttemptBaseResource):\n    def post(self, hospede_id):\n        attempt_service = AttemptService(db.session)\n        try:\n            data = request.get_json()\n            attempt = attempt_service.criar_attempt(data, hospede_id)\n            return {\n                \"codigo_uuid\": attempt.codigo_uuid,\n                \"status\": str(attempt.status),\n                \"hospede\": [",
        "detail": "src.controllers.AttemptController",
        "documentation": {}
    },
    {
        "label": "AttemptListResource",
        "kind": 6,
        "importPath": "src.controllers.AttemptController",
        "description": "src.controllers.AttemptController",
        "peekOfCode": "class AttemptListResource(AttemptBaseResource):\n    def get(self, attempt_id):\n        attempt_service = AttemptService(db.session)\n        try:\n            attempt = attempt_service.listar_attempt(attempt_id)\n            return {\n                \"codigo_uuid\": attempt.codigo_uuid,\n                \"status\": str(attempt.status),\n                \"hospede\": [\n                    {",
        "detail": "src.controllers.AttemptController",
        "documentation": {}
    },
    {
        "label": "AttemptStatusResource",
        "kind": 6,
        "importPath": "src.controllers.AttemptController",
        "description": "src.controllers.AttemptController",
        "peekOfCode": "class AttemptStatusResource(AttemptBaseResource):\n    def patch(self, attempt_id):\n        attempt_service = AttemptService(db.session)\n        data = request.get_json()\n        try:\n            attempt = attempt_service.forcar_status_attempt(attempt_id, data['status'])\n            return {\n                \"codigo_uuid\": attempt.codigo_uuid,\n                \"status\": str(attempt.status),\n                \"hospede\": [",
        "detail": "src.controllers.AttemptController",
        "documentation": {}
    },
    {
        "label": "ATTEMPT_API_KEY",
        "kind": 5,
        "importPath": "src.controllers.AttemptController",
        "description": "src.controllers.AttemptController",
        "peekOfCode": "ATTEMPT_API_KEY = os.getenv(\"ATTEMPT_API_KEY\")\nclass AttemptBaseResource(Resource):\n    method_decorators = [require_api_key(ATTEMPT_API_KEY)]\nclass AttemptResource(AttemptBaseResource):\n    def post(self, hospede_id):\n        attempt_service = AttemptService(db.session)\n        try:\n            data = request.get_json()\n            attempt = attempt_service.criar_attempt(data, hospede_id)\n            return {",
        "detail": "src.controllers.AttemptController",
        "documentation": {}
    },
    {
        "label": "Hello",
        "kind": 6,
        "importPath": "src.controllers.HelloWorld",
        "description": "src.controllers.HelloWorld",
        "peekOfCode": "class Hello(Resource):\n    def get(self):\n        return {\"message\": \"Ola delmir!\"}",
        "detail": "src.controllers.HelloWorld",
        "documentation": {}
    },
    {
        "label": "HospedeBaseResource",
        "kind": 6,
        "importPath": "src.controllers.HospedeController",
        "description": "src.controllers.HospedeController",
        "peekOfCode": "class HospedeBaseResource(Resource):\n    method_decorators = [require_api_key(HOSPEDE_API_KEY)]\nclass HospedeResource(HospedeBaseResource):\n    def post(self):\n        hospede_service = HospedeService(db.session)\n        try:\n            data = request.get_json()\n            hospede = hospede_service.criar_hospede(data)\n            return {\n                \"codigo_uuid\": hospede.codigo_uuid,",
        "detail": "src.controllers.HospedeController",
        "documentation": {}
    },
    {
        "label": "HospedeResource",
        "kind": 6,
        "importPath": "src.controllers.HospedeController",
        "description": "src.controllers.HospedeController",
        "peekOfCode": "class HospedeResource(HospedeBaseResource):\n    def post(self):\n        hospede_service = HospedeService(db.session)\n        try:\n            data = request.get_json()\n            hospede = hospede_service.criar_hospede(data)\n            return {\n                \"codigo_uuid\": hospede.codigo_uuid,\n                \"status\": str(hospede.status),\n            }, 201",
        "detail": "src.controllers.HospedeController",
        "documentation": {}
    },
    {
        "label": "HospedeListResource",
        "kind": 6,
        "importPath": "src.controllers.HospedeController",
        "description": "src.controllers.HospedeController",
        "peekOfCode": "class HospedeListResource(HospedeBaseResource):\n    def get(self, hospede_id):\n        hospede_service = HospedeService(db.session)\n        try:\n            hospede = hospede_service.listar_hospede(hospede_id)\n            return {\n                \"codigo_uuid\": hospede.codigo_uuid,\n                \"status\": str(hospede.status),\n                \"reservas\": [\n                    {",
        "detail": "src.controllers.HospedeController",
        "documentation": {}
    },
    {
        "label": "HospedeStatusResource",
        "kind": 6,
        "importPath": "src.controllers.HospedeController",
        "description": "src.controllers.HospedeController",
        "peekOfCode": "class HospedeStatusResource(HospedeBaseResource):\n    def patch(self, hospede_id):\n        hospede_service = HospedeService(db.session)\n        try:\n            hospede = hospede_service.forcar_status_hospede(hospede_id)\n            return {\n                \"codigo_uuid\": hospede.codigo_uuid,\n                \"status\": str(hospede.status),\n                \"reservas\": [\n                    {",
        "detail": "src.controllers.HospedeController",
        "documentation": {}
    },
    {
        "label": "HOSPEDE_API_KEY",
        "kind": 5,
        "importPath": "src.controllers.HospedeController",
        "description": "src.controllers.HospedeController",
        "peekOfCode": "HOSPEDE_API_KEY = os.getenv(\"HOSPEDE_API_KEY\")\nclass HospedeBaseResource(Resource):\n    method_decorators = [require_api_key(HOSPEDE_API_KEY)]\nclass HospedeResource(HospedeBaseResource):\n    def post(self):\n        hospede_service = HospedeService(db.session)\n        try:\n            data = request.get_json()\n            hospede = hospede_service.criar_hospede(data)\n            return {",
        "detail": "src.controllers.HospedeController",
        "documentation": {}
    },
    {
        "label": "ReservaBaseResource",
        "kind": 6,
        "importPath": "src.controllers.ReservaController",
        "description": "src.controllers.ReservaController",
        "peekOfCode": "class ReservaBaseResource(Resource):\n    method_decorators = [require_api_key(RESERVA_API_KEY)]\nclass ReservaResource(ReservaBaseResource):\n    def post(self):\n        reserva_service = ReservaService(db.session)\n        try:\n            data = request.get_json()\n            reserva = reserva_service.criar_reserva(data)\n            return {\n                \"codigo_uuid\": reserva.codigo_uuid,",
        "detail": "src.controllers.ReservaController",
        "documentation": {}
    },
    {
        "label": "ReservaResource",
        "kind": 6,
        "importPath": "src.controllers.ReservaController",
        "description": "src.controllers.ReservaController",
        "peekOfCode": "class ReservaResource(ReservaBaseResource):\n    def post(self):\n        reserva_service = ReservaService(db.session)\n        try:\n            data = request.get_json()\n            reserva = reserva_service.criar_reserva(data)\n            return {\n                \"codigo_uuid\": reserva.codigo_uuid,\n                \"numero_reserva\": reserva.numero_reserva,\n                \"status\": str(reserva.status),",
        "detail": "src.controllers.ReservaController",
        "documentation": {}
    },
    {
        "label": "ReservaListResource",
        "kind": 6,
        "importPath": "src.controllers.ReservaController",
        "description": "src.controllers.ReservaController",
        "peekOfCode": "class ReservaListResource(ReservaBaseResource):\n    def get(self, reserva_id):\n        reserva_service = ReservaService(db.session)\n        try:\n            reserva = reserva_service.listar_reserva(reserva_id)\n            return {\n                \"codigo_uuid\": reserva.codigo_uuid,\n                \"numero_reserva\": reserva.numero_reserva,\n                \"status\": str(reserva.status),\n                \"data_checkin\": reserva.data_checkin.isoformat(),",
        "detail": "src.controllers.ReservaController",
        "documentation": {}
    },
    {
        "label": "ReservaStatusResource",
        "kind": 6,
        "importPath": "src.controllers.ReservaController",
        "description": "src.controllers.ReservaController",
        "peekOfCode": "class ReservaStatusResource(ReservaBaseResource):\n    def patch(self, reserva_id):\n        reserva_service = ReservaService(db.session)\n        try:\n            reserva = reserva_service.forcar_status_reserva(reserva_id)\n            return {\n                \"codigo_uuid\": reserva.codigo_uuid,\n                \"numero_reserva\": reserva.numero_reserva,\n                \"status\": str(reserva.status),\n                \"data_checkin\": reserva.data_checkin.isoformat(),",
        "detail": "src.controllers.ReservaController",
        "documentation": {}
    },
    {
        "label": "ReservaHospedeResource",
        "kind": 6,
        "importPath": "src.controllers.ReservaController",
        "description": "src.controllers.ReservaController",
        "peekOfCode": "class ReservaHospedeResource(ReservaBaseResource):\n    def post(self, reserva_id, hospede_id):\n        reserva_service = ReservaService(db.session)\n        try:\n            reserva = reserva_service.adicionar_hospede_a_reserva(reserva_id, hospede_id)\n            return {\n                \"codigo_uuid\": reserva.codigo_uuid,\n                \"numero_reserva\": reserva.numero_reserva,\n                \"status\": str(reserva.status),\n                \"data_checkin\": reserva.data_checkin.isoformat(),",
        "detail": "src.controllers.ReservaController",
        "documentation": {}
    },
    {
        "label": "RESERVA_API_KEY",
        "kind": 5,
        "importPath": "src.controllers.ReservaController",
        "description": "src.controllers.ReservaController",
        "peekOfCode": "RESERVA_API_KEY = os.getenv(\"RESERVA_API_KEY\")\nclass ReservaBaseResource(Resource):\n    method_decorators = [require_api_key(RESERVA_API_KEY)]\nclass ReservaResource(ReservaBaseResource):\n    def post(self):\n        reserva_service = ReservaService(db.session)\n        try:\n            data = request.get_json()\n            reserva = reserva_service.criar_reserva(data)\n            return {",
        "detail": "src.controllers.ReservaController",
        "documentation": {}
    },
    {
        "label": "VerificacaoController",
        "kind": 6,
        "importPath": "src.controllers.Verificacao",
        "description": "src.controllers.Verificacao",
        "peekOfCode": "class VerificacaoController(Resource):\n    def post(self):\n        try:\n            data = request.get_json()\n            if 'document' not in data or 'selfie' not in data:\n                return {\"error\": \"Campos 'document' e 'selfie' são obrigatórios.\"}, 400\n            result = verify_faces(data['document'], data['selfie'])\n            return result, 200\n        except ValueError as ve:\n            return {\"error\": str(ve)}, 400",
        "detail": "src.controllers.Verificacao",
        "documentation": {}
    },
    {
        "label": "Attempt",
        "kind": 6,
        "importPath": "src.models.Attempt",
        "description": "src.models.Attempt",
        "peekOfCode": "class Attempt(Base):\n    __tablename__ = 'attempt'\n    codigo_uuid = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))\n    status = Column(Boolean)\n    hospedes = relationship(\n        \"Hospede\",\n        secondary=hospede_attempt,\n        back_populates=\"attempts\"\n    )\n    def __init__(self, status):",
        "detail": "src.models.Attempt",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "src.models.Base",
        "description": "src.models.Base",
        "peekOfCode": "Base = declarative_base()\ndb = SQLAlchemy()",
        "detail": "src.models.Base",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "src.models.Base",
        "description": "src.models.Base",
        "peekOfCode": "db = SQLAlchemy()",
        "detail": "src.models.Base",
        "documentation": {}
    },
    {
        "label": "Hospede",
        "kind": 6,
        "importPath": "src.models.Hospede",
        "description": "src.models.Hospede",
        "peekOfCode": "class Hospede(Base):\n    __tablename__ = 'hospede'\n    codigo_uuid = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))\n    status = Column(Boolean)\n    reservas = relationship(\n        \"Reserva\",\n        secondary=hospede_reserva,\n        back_populates=\"hospedes\"\n    )\n    attempts = relationship(",
        "detail": "src.models.Hospede",
        "documentation": {}
    },
    {
        "label": "hospede_attempt",
        "kind": 5,
        "importPath": "src.models.Hospede_Attempt",
        "description": "src.models.Hospede_Attempt",
        "peekOfCode": "hospede_attempt = Table(\n    'hospede_attempt',\n    Base.metadata,\n    Column('hospede_uuid', ForeignKey('hospede.codigo_uuid'), primary_key=True),\n    Column('attempt_uuid', ForeignKey('attempt.codigo_uuid'), primary_key=True)\n)",
        "detail": "src.models.Hospede_Attempt",
        "documentation": {}
    },
    {
        "label": "hospede_reserva",
        "kind": 5,
        "importPath": "src.models.Hospede_Reserva",
        "description": "src.models.Hospede_Reserva",
        "peekOfCode": "hospede_reserva = Table(\n    'hospede_reserva',\n    Base.metadata,\n    Column('hospede_uuid', ForeignKey('hospede.codigo_uuid'), primary_key=True),\n    Column('reserva_uuid', ForeignKey('reserva.codigo_uuid'), primary_key=True)\n)",
        "detail": "src.models.Hospede_Reserva",
        "documentation": {}
    },
    {
        "label": "Reserva",
        "kind": 6,
        "importPath": "src.models.Reserva",
        "description": "src.models.Reserva",
        "peekOfCode": "class Reserva(Base):\n    __tablename__ = 'reserva'\n    codigo_uuid = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))\n    numero_reserva = Column(String(50), nullable=False)\n    status = Column(Boolean)\n    data_checkin = Column(DateTime, default=datetime.datetime.now)\n    hospedes = relationship(\n        \"Hospede\",\n        secondary=hospede_reserva,\n        back_populates=\"reservas\"",
        "detail": "src.models.Reserva",
        "documentation": {}
    },
    {
        "label": "AttemptRepository",
        "kind": 6,
        "importPath": "src.repository.attempt_repository",
        "description": "src.repository.attempt_repository",
        "peekOfCode": "class AttemptRepository:\n    def __init__(self, session: Session):\n        self.session = session\n    def add(self, attempt, hospede_id):\n        self.session.add(attempt)\n        self.session.commit()\n        self.session.refresh(attempt)\n        attempt_id = attempt.codigo_uuid\n        attempt = self.session.query(Attempt).get(attempt_id)\n        hospede = self.session.query(Hospede).get(hospede_id)",
        "detail": "src.repository.attempt_repository",
        "documentation": {}
    },
    {
        "label": "HospedeRepository",
        "kind": 6,
        "importPath": "src.repository.hospede_repository",
        "description": "src.repository.hospede_repository",
        "peekOfCode": "class HospedeRepository:\n    def __init__(self, session: Session):\n        self.session = session\n    def add(self, hospede):\n        self.session.add(hospede)\n        self.session.commit()\n        self.session.refresh(hospede)\n        return hospede\n    def listar_hospede(self, hospede_id):\n        return self.session.query(Hospede).filter_by(codigo_uuid=hospede_id).first()",
        "detail": "src.repository.hospede_repository",
        "documentation": {}
    },
    {
        "label": "ReservaRepository",
        "kind": 6,
        "importPath": "src.repository.reserva_repository",
        "description": "src.repository.reserva_repository",
        "peekOfCode": "class ReservaRepository:\n    def __init__(self, session: Session):\n        self.session = session\n    def add(self, reserva):\n        self.session.add(reserva)\n        self.session.commit()\n        self.session.refresh(reserva)\n        return reserva\n    def listar_reserva(self, reserva_id):\n        return self.session.query(Reserva).filter_by(codigo_uuid=reserva_id).first()",
        "detail": "src.repository.reserva_repository",
        "documentation": {}
    },
    {
        "label": "initialize_endpoints",
        "kind": 2,
        "importPath": "src.routes.endpoints",
        "description": "src.routes.endpoints",
        "peekOfCode": "def initialize_endpoints(api):\n    api.add_resource(Hello, \"/hello\")\n    api.add_resource(VerificacaoController, \"/verify_faces\")\n    #Reserva Endpoints\n    api.add_resource(ReservaResource, \"/reserva\")\n    api.add_resource(ReservaHospedeResource, \"/reserva/<string:reserva_id>/hospede/<string:hospede_id>\")\n    api.add_resource(ReservaListResource, \"/reserva/<string:reserva_id>\")\n    api.add_resource(ReservaStatusResource, \"/reserva/status/<string:reserva_id>\")\n    #Hospede Endpoints\n    api.add_resource(HospedeResource, \"/hospede\")",
        "detail": "src.routes.endpoints",
        "documentation": {}
    },
    {
        "label": "AttemptService",
        "kind": 6,
        "importPath": "src.service.attempt_service",
        "description": "src.service.attempt_service",
        "peekOfCode": "class AttemptService:\n    def __init__(self, session: Session):\n        self.repo = AttemptRepository(session)\n        self.hosp = HospedeService(session)\n        self.session = session\n    def criar_attempt(self, data, hospede_id):\n        attempt = Attempt(\n            status=data.get(\"status\")\n        )\n        self.hosp.listar_hospede(hospede_id)",
        "detail": "src.service.attempt_service",
        "documentation": {}
    },
    {
        "label": "HospedeService",
        "kind": 6,
        "importPath": "src.service.hospede_service",
        "description": "src.service.hospede_service",
        "peekOfCode": "class HospedeService:\n    def __init__(self, session: Session):\n        self.repo = HospedeRepository(session)\n        self.session = session\n    def criar_hospede(self, data):\n        hospede = Hospede(\n            status=data.get(\"status\")\n        )\n        return self.repo.add(hospede)\n    def listar_hospede(self, hospede_id):",
        "detail": "src.service.hospede_service",
        "documentation": {}
    },
    {
        "label": "ReservaService",
        "kind": 6,
        "importPath": "src.service.reserva_service",
        "description": "src.service.reserva_service",
        "peekOfCode": "class ReservaService:\n    def __init__(self, session: Session):\n        self.repo = ReservaRepository(session)\n        self.session = session\n    def criar_reserva(self, data):\n        reserva = Reserva(\n            numero_reserva=data.get(\"numero_reserva\"),\n            status=data.get(\"status\")\n        )\n        return self.repo.add(reserva)",
        "detail": "src.service.reserva_service",
        "documentation": {}
    },
    {
        "label": "base64_to_cv2_image",
        "kind": 2,
        "importPath": "src.service.verificacao_service",
        "description": "src.service.verificacao_service",
        "peekOfCode": "def base64_to_cv2_image(base64_str):\n    img_data = base64.b64decode(base64_str)\n    np_arr = np.frombuffer(img_data, np.uint8)\n    img = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)\n    return img\ndef validate_image_quality(img, name, min_size=100, blur_threshold=100.0, min_brightness=30, max_brightness=300):\n    if img.shape[0] < min_size or img.shape[1] < min_size:\n        raise ValueError(f\"A imagem: {name}, é muito pequena para análise.\")\n    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    variance = cv2.Laplacian(gray, cv2.CV_64F).var()",
        "detail": "src.service.verificacao_service",
        "documentation": {}
    },
    {
        "label": "validate_image_quality",
        "kind": 2,
        "importPath": "src.service.verificacao_service",
        "description": "src.service.verificacao_service",
        "peekOfCode": "def validate_image_quality(img, name, min_size=100, blur_threshold=100.0, min_brightness=30, max_brightness=300):\n    if img.shape[0] < min_size or img.shape[1] < min_size:\n        raise ValueError(f\"A imagem: {name}, é muito pequena para análise.\")\n    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    variance = cv2.Laplacian(gray, cv2.CV_64F).var()\n    if variance < blur_threshold:\n        raise ValueError(f\"A imagem: {name}, está borrada, envie uma foto mais nítida.\")\n    mean_brightness = np.mean(gray)\n    if mean_brightness < min_brightness or mean_brightness > max_brightness:\n        raise ValueError(f\"A imagem: {name}, está muito escura ou muito clara.\")",
        "detail": "src.service.verificacao_service",
        "documentation": {}
    },
    {
        "label": "verify_Presente_face",
        "kind": 2,
        "importPath": "src.service.verificacao_service",
        "description": "src.service.verificacao_service",
        "peekOfCode": "def verify_Presente_face(imgDocument, imgSelfie):\n    try:\n        result = DeepFace.verify(\n            img1_path=imgDocument,\n            img2_path=imgSelfie, \n            model_name=\"ArcFace\", \n            distance_metric=\"euclidean_l2\")\n    except ValueError:\n        raise ValueError(\"Nenhum rosto detectado em uma ou em ambas as imagens.\") \n    return result",
        "detail": "src.service.verificacao_service",
        "documentation": {}
    },
    {
        "label": "ocr_image",
        "kind": 2,
        "importPath": "src.service.verificacao_service",
        "description": "src.service.verificacao_service",
        "peekOfCode": "def ocr_image(img, langs=\"por+eng\"):\n    text = pytesseract.image_to_string(img, lang=langs)\n    return text\ndef extract_with_ai(text, wishlist):\n    prompt = f\"\"\"\n        Você é um assistente de extração de dados.  \n        Extraia os seguintes campos do texto abaixo e retorne em JSON.  \n        Campos: {wishlist}, no campo pais_de_origem_do_documento, tente estivar o país onde foi emitido o documento.\n        O retorno deve ser um json, estritamente desta forma:\n        {{",
        "detail": "src.service.verificacao_service",
        "documentation": {}
    },
    {
        "label": "extract_with_ai",
        "kind": 2,
        "importPath": "src.service.verificacao_service",
        "description": "src.service.verificacao_service",
        "peekOfCode": "def extract_with_ai(text, wishlist):\n    prompt = f\"\"\"\n        Você é um assistente de extração de dados.  \n        Extraia os seguintes campos do texto abaixo e retorne em JSON.  \n        Campos: {wishlist}, no campo pais_de_origem_do_documento, tente estivar o país onde foi emitido o documento.\n        O retorno deve ser um json, estritamente desta forma:\n        {{\n            \"campo1\": \"valor\",\n            \"campo2\": \"valor\",\n            ...",
        "detail": "src.service.verificacao_service",
        "documentation": {}
    },
    {
        "label": "crop_face",
        "kind": 2,
        "importPath": "src.service.verificacao_service",
        "description": "src.service.verificacao_service",
        "peekOfCode": "def crop_face(img, face_coords):\n    x, y, w, h = face_coords['x'], face_coords['y'], face_coords['w'], face_coords['h']\n    face_img = img[y:y+h, x:x+w]\n    return face_img\ndef cv2_to_base64(img):\n    _, buffer = cv2.imencode('.jpg', img)\n    return base64.b64encode(buffer).decode('utf-8')\ndef verify_faces(document_base64, selfie_base64):\n    imgDocument = base64_to_cv2_image(document_base64)\n    imgSelfie = base64_to_cv2_image(selfie_base64)",
        "detail": "src.service.verificacao_service",
        "documentation": {}
    },
    {
        "label": "cv2_to_base64",
        "kind": 2,
        "importPath": "src.service.verificacao_service",
        "description": "src.service.verificacao_service",
        "peekOfCode": "def cv2_to_base64(img):\n    _, buffer = cv2.imencode('.jpg', img)\n    return base64.b64encode(buffer).decode('utf-8')\ndef verify_faces(document_base64, selfie_base64):\n    imgDocument = base64_to_cv2_image(document_base64)\n    imgSelfie = base64_to_cv2_image(selfie_base64)\n    validate_image_quality(imgDocument, name=\"Documento\")\n    validate_image_quality(imgSelfie, name=\"Selfie\")\n    wishlist = [\"nome\", \"data_nascimento\", \"naturalidade\", \"pais_de_origem_do_documento\", \"lingua_nativa_do_documento\"]\n    document_data = ocr_image(imgDocument)",
        "detail": "src.service.verificacao_service",
        "documentation": {}
    },
    {
        "label": "verify_faces",
        "kind": 2,
        "importPath": "src.service.verificacao_service",
        "description": "src.service.verificacao_service",
        "peekOfCode": "def verify_faces(document_base64, selfie_base64):\n    imgDocument = base64_to_cv2_image(document_base64)\n    imgSelfie = base64_to_cv2_image(selfie_base64)\n    validate_image_quality(imgDocument, name=\"Documento\")\n    validate_image_quality(imgSelfie, name=\"Selfie\")\n    wishlist = [\"nome\", \"data_nascimento\", \"naturalidade\", \"pais_de_origem_do_documento\", \"lingua_nativa_do_documento\"]\n    document_data = ocr_image(imgDocument)\n    document_data = extract_with_ai(document_data, wishlist)\n    result = verify_Presente_face(imgDocument, imgSelfie)\n    face_document_img = crop_face(imgDocument, result['facial_areas']['img1'])",
        "detail": "src.service.verificacao_service",
        "documentation": {}
    },
    {
        "label": "pytesseract.pytesseract.tesseract_cmd",
        "kind": 5,
        "importPath": "src.service.verificacao_service",
        "description": "src.service.verificacao_service",
        "peekOfCode": "pytesseract.pytesseract.tesseract_cmd = r\"C:\\Program Files\\Tesseract-OCR\\tesseract.exe\"\nclient = genai.Client(api_key=os.getenv(\"GEMINI_API_KEY\"))\ndef base64_to_cv2_image(base64_str):\n    img_data = base64.b64decode(base64_str)\n    np_arr = np.frombuffer(img_data, np.uint8)\n    img = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)\n    return img\ndef validate_image_quality(img, name, min_size=100, blur_threshold=100.0, min_brightness=30, max_brightness=300):\n    if img.shape[0] < min_size or img.shape[1] < min_size:\n        raise ValueError(f\"A imagem: {name}, é muito pequena para análise.\")",
        "detail": "src.service.verificacao_service",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "src.service.verificacao_service",
        "description": "src.service.verificacao_service",
        "peekOfCode": "client = genai.Client(api_key=os.getenv(\"GEMINI_API_KEY\"))\ndef base64_to_cv2_image(base64_str):\n    img_data = base64.b64decode(base64_str)\n    np_arr = np.frombuffer(img_data, np.uint8)\n    img = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)\n    return img\ndef validate_image_quality(img, name, min_size=100, blur_threshold=100.0, min_brightness=30, max_brightness=300):\n    if img.shape[0] < min_size or img.shape[1] < min_size:\n        raise ValueError(f\"A imagem: {name}, é muito pequena para análise.\")\n    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)",
        "detail": "src.service.verificacao_service",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "app = create_app()",
        "detail": "manage",
        "documentation": {}
    }
]